{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport getTodo from \"../../configuration/ api-endpoints\";\n\n// Асинхронно действие за изпращане на коментар\nexport const submitComment = createAsyncThunk(\"comments/submitComment\", async ({\n  email,\n  comment\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(getTodo.POST_COMMENT, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        comment\n      })\n    });\n    console.log(\"pesho\", response.data);\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    comments: [],\n    status: \"idle\",\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(submitComment.pending, state => {\n      state.status = \"loading\";\n    }).addCase(submitComment.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.comments.push(action.payload);\n    }).addCase(submitComment.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n  }\n});\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getTodo","submitComment","email","comment","rejectWithValue","response","fetch","POST_COMMENT","method","body","JSON","stringify","console","log","data","error","commentsSlice","name","initialState","comments","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","push","payload","rejected","reducer"],"sources":["/Users/dimitar/Documents/projects/my_project/upload_article/src/store/commentForm/commentSlice.js"],"sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport getTodo from \"../../configuration/ api-endpoints\";\n\n// Асинхронно действие за изпращане на коментар\nexport const submitComment = createAsyncThunk(\n  \"comments/submitComment\",\n  async ({email, comment}, {rejectWithValue}) => {\n    try {\n      const response = await fetch(getTodo.POST_COMMENT, {\n        method: \"POST\",\n        body: JSON.stringify({email, comment})\n      });\n      console.log(\"pesho\", response.data);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response.data);\n    }\n  }\n);\n\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    comments: [],\n    status: \"idle\",\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(submitComment.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(submitComment.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.comments.push(action.payload);\n      })\n      .addCase(submitComment.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload;\n      });\n  },\n});\n\nexport default commentsSlice.reducer;\n"],"mappings":"AAAA,SAAQA,gBAAgB,EAAEC,WAAW,QAAO,kBAAkB;AAC9D,OAAOC,OAAO,MAAM,oCAAoC;;AAExD;AACA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAC3C,wBAAwB,EACxB,OAAO;EAACI,KAAK;EAAEC;AAAO,CAAC,EAAE;EAACC;AAAe,CAAC,KAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAO,CAACO,YAAY,EAAE;MACjDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACT,KAAK;QAAEC;MAAO,CAAC;IACvC,CAAC,CAAC;IACFS,OAAO,CAACC,GAAG,CAAC,OAAO,EAAER,QAAQ,CAACS,IAAI,CAAC;IACnC,OAAOT,QAAQ,CAACS,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOX,eAAe,CAACW,KAAK,CAACV,QAAQ,CAACS,IAAI,CAAC;EAC7C;AACF,CACF,CAAC;AAED,MAAME,aAAa,GAAGjB,WAAW,CAAC;EAChCkB,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,MAAM;IACdL,KAAK,EAAE;EACT,CAAC;EACDM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACvB,aAAa,CAACwB,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACvB,aAAa,CAAC0B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACN,MAAM,GAAG,WAAW;MAC1BM,KAAK,CAACP,QAAQ,CAACU,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACrC,CAAC,CAAC,CACDN,OAAO,CAACvB,aAAa,CAAC8B,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAed,aAAa,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}