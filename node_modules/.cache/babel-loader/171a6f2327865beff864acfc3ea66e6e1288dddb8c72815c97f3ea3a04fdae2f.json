{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport getTodo from \"../../configuration/ api-endpoints\";\nimport { fetchTodo } from \"../todoSlice/todoSlice\";\n// getAll likesDislikes from server\nexport const fetchLikesDislikes = createAsyncThunk(\"fetchLikesDislikes\", async () => {\n  return fetch(getTodo.GET_LIKES_DISLIKES).then(response => response.json()).then(json => {\n    return json;\n  });\n});\nconst initialState = {\n  likes: 0,\n  dislikes: 0,\n  data: [],\n  error: false,\n  status: \"idle\"\n};\nconst likesSlice = createSlice({\n  name: \"likesDislikes\",\n  initialState,\n  reducers: {\n    incrementLike: state => {\n      state.likes += 1;\n    },\n    incrementDislike: state => {\n      state.dislikes += 1;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchLikesDislikes.pending, (state, action) => {\n      state.status = \"loading\";\n      state.isLoading = true;\n    });\n    builder.addCase(fetchLikesDislikes.fulfilled, (state, action) => {\n      let likesDislikesArr = [];\n      state.isLoading = false;\n      state.status = \"succeeded\";\n      for (let i = 0; i < action.payload.length; i++) {\n        likesDislikesArr.push({\n          tour_id: action.payload[i].id,\n          likes: action.payload[i].likes,\n          dislikes: action.payload[i].dislikes\n        });\n      }\n      state.data = likesDislikesArr;\n      console.log(\"pesho\", likesDislikesArr);\n    });\n    builder.addCase(fetchTodo.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = true;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  incrementLike,\n  incrementDislike\n} = likesSlice.actions;\nexport default likesSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getTodo","fetchTodo","fetchLikesDislikes","fetch","GET_LIKES_DISLIKES","then","response","json","initialState","likes","dislikes","data","error","status","likesSlice","name","reducers","incrementLike","state","incrementDislike","extraReducers","builder","addCase","pending","action","isLoading","fulfilled","likesDislikesArr","i","payload","length","push","tour_id","id","console","log","rejected","message","actions","reducer"],"sources":["/Users/dimitar/Documents/projects/my_project/upload_article/src/store/likesSlice/likesSlice.js"],"sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport getTodo from \"../../configuration/ api-endpoints\";\nimport {fetchTodo} from \"../todoSlice/todoSlice\";\n// getAll likesDislikes from server\nexport const fetchLikesDislikes = createAsyncThunk(\"fetchLikesDislikes\", async () => {\n  return fetch(getTodo.GET_LIKES_DISLIKES)\n    .then(response => response.json())\n    .then(json => {\n      return json;\n    });\n});\n\n\nconst initialState = {\n  likes: 0,\n  dislikes: 0,\n  data: [],\n  error: false,\n  status: \"idle\"\n};\n\nconst likesSlice = createSlice({\n  name: \"likesDislikes\",\n  initialState,\n  reducers: {\n    incrementLike: (state) => {\n      state.likes += 1;\n    },\n    incrementDislike: (state) => {\n      state.dislikes += 1;\n    },\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchLikesDislikes.pending, (state, action) => {\n      state.status = \"loading\";\n      state.isLoading = true;\n    });\n    builder.addCase(fetchLikesDislikes.fulfilled, (state, action) => {\n      let likesDislikesArr = [];\n      state.isLoading = false;\n      state.status = \"succeeded\";\n      for (let i = 0; i < action.payload.length; i++) {\n        likesDislikesArr.push({\n          tour_id: action.payload[i].id,\n          likes: action.payload[i].likes,\n          dislikes: action.payload[i].dislikes,\n        });\n      }\n      state.data = likesDislikesArr;\n      console.log(\"pesho\", likesDislikesArr);\n    });\n    builder.addCase(fetchTodo.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = true;\n      state.error = action.error.message;\n    });\n  }\n});\n\nexport const {incrementLike, incrementDislike} = likesSlice.actions;\n\nexport default likesSlice.reducer;\n"],"mappings":"AAAA,SAAQA,gBAAgB,EAAEC,WAAW,QAAO,kBAAkB;AAC9D,OAAOC,OAAO,MAAM,oCAAoC;AACxD,SAAQC,SAAS,QAAO,wBAAwB;AAChD;AACA,OAAO,MAAMC,kBAAkB,GAAGJ,gBAAgB,CAAC,oBAAoB,EAAE,YAAY;EACnF,OAAOK,KAAK,CAACH,OAAO,CAACI,kBAAkB,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAI;IACZ,OAAOA,IAAI;EACb,CAAC,CAAC;AACN,CAAC,CAAC;AAGF,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,QAAQ,EAAE,CAAC;EACXC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE,KAAK;EACZC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,UAAU,GAAGf,WAAW,CAAC;EAC7BgB,IAAI,EAAE,eAAe;EACrBP,YAAY;EACZQ,QAAQ,EAAE;IACRC,aAAa,EAAGC,KAAK,IAAK;MACxBA,KAAK,CAACT,KAAK,IAAI,CAAC;IAClB,CAAC;IACDU,gBAAgB,EAAGD,KAAK,IAAK;MAC3BA,KAAK,CAACR,QAAQ,IAAI,CAAC;IACrB;EACF,CAAC;EACDU,aAAa,EAAEC,OAAO,IAAI;IACxBA,OAAO,CAACC,OAAO,CAACpB,kBAAkB,CAACqB,OAAO,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC7DN,KAAK,CAACL,MAAM,GAAG,SAAS;MACxBK,KAAK,CAACO,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAACpB,kBAAkB,CAACwB,SAAS,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC/D,IAAIG,gBAAgB,GAAG,EAAE;MACzBT,KAAK,CAACO,SAAS,GAAG,KAAK;MACvBP,KAAK,CAACL,MAAM,GAAG,WAAW;MAC1B,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACK,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC9CD,gBAAgB,CAACI,IAAI,CAAC;UACpBC,OAAO,EAAER,MAAM,CAACK,OAAO,CAACD,CAAC,CAAC,CAACK,EAAE;UAC7BxB,KAAK,EAAEe,MAAM,CAACK,OAAO,CAACD,CAAC,CAAC,CAACnB,KAAK;UAC9BC,QAAQ,EAAEc,MAAM,CAACK,OAAO,CAACD,CAAC,CAAC,CAAClB;QAC9B,CAAC,CAAC;MACJ;MACAQ,KAAK,CAACP,IAAI,GAAGgB,gBAAgB;MAC7BO,OAAO,CAACC,GAAG,CAAC,OAAO,EAAER,gBAAgB,CAAC;IACxC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACrB,SAAS,CAACmC,QAAQ,EAAE,CAAClB,KAAK,EAAEM,MAAM,KAAK;MACrDN,KAAK,CAACL,MAAM,GAAG,QAAQ;MACvBK,KAAK,CAACN,KAAK,GAAG,IAAI;MAClBM,KAAK,CAACN,KAAK,GAAGY,MAAM,CAACZ,KAAK,CAACyB,OAAO;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAACpB,aAAa;EAAEE;AAAgB,CAAC,GAAGL,UAAU,CAACwB,OAAO;AAEnE,eAAexB,UAAU,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}